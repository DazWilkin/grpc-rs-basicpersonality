// This file is generated by rust-protobuf 2.7.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `basicpersonality.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_7_0;

#[derive(PartialEq,Clone,Default)]
pub struct ThingRequest {
    // message fields
    pub thing: ::protobuf::SingularPtrField<Thing>,
    pub extra: ::protobuf::SingularPtrField<Extra>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ThingRequest {
    fn default() -> &'a ThingRequest {
        <ThingRequest as ::protobuf::Message>::default_instance()
    }
}

impl ThingRequest {
    pub fn new() -> ThingRequest {
        ::std::default::Default::default()
    }

    // .basicpersonality.Thing thing = 1;


    pub fn get_thing(&self) -> &Thing {
        self.thing.as_ref().unwrap_or_else(|| Thing::default_instance())
    }
    pub fn clear_thing(&mut self) {
        self.thing.clear();
    }

    pub fn has_thing(&self) -> bool {
        self.thing.is_some()
    }

    // Param is passed by value, moved
    pub fn set_thing(&mut self, v: Thing) {
        self.thing = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_thing(&mut self) -> &mut Thing {
        if self.thing.is_none() {
            self.thing.set_default();
        }
        self.thing.as_mut().unwrap()
    }

    // Take field
    pub fn take_thing(&mut self) -> Thing {
        self.thing.take().unwrap_or_else(|| Thing::new())
    }

    // .basicpersonality.Extra extra = 2;


    pub fn get_extra(&self) -> &Extra {
        self.extra.as_ref().unwrap_or_else(|| Extra::default_instance())
    }
    pub fn clear_extra(&mut self) {
        self.extra.clear();
    }

    pub fn has_extra(&self) -> bool {
        self.extra.is_some()
    }

    // Param is passed by value, moved
    pub fn set_extra(&mut self, v: Extra) {
        self.extra = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_extra(&mut self) -> &mut Extra {
        if self.extra.is_none() {
            self.extra.set_default();
        }
        self.extra.as_mut().unwrap()
    }

    // Take field
    pub fn take_extra(&mut self) -> Extra {
        self.extra.take().unwrap_or_else(|| Extra::new())
    }
}

impl ::protobuf::Message for ThingRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.thing {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.extra {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.thing)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.extra)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.thing.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.extra.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.thing.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.extra.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ThingRequest {
        ThingRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Thing>>(
                    "thing",
                    |m: &ThingRequest| { &m.thing },
                    |m: &mut ThingRequest| { &mut m.thing },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Extra>>(
                    "extra",
                    |m: &ThingRequest| { &m.extra },
                    |m: &mut ThingRequest| { &mut m.extra },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ThingRequest>(
                    "ThingRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ThingRequest {
        static mut instance: ::protobuf::lazy::Lazy<ThingRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ThingRequest,
        };
        unsafe {
            instance.get(ThingRequest::new)
        }
    }
}

impl ::protobuf::Clear for ThingRequest {
    fn clear(&mut self) {
        self.thing.clear();
        self.extra.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ThingRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ThingRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ThingResponse {
    // message fields
    pub status: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ThingResponse {
    fn default() -> &'a ThingResponse {
        <ThingResponse as ::protobuf::Message>::default_instance()
    }
}

impl ThingResponse {
    pub fn new() -> ThingResponse {
        ::std::default::Default::default()
    }

    // string status = 1;


    pub fn get_status(&self) -> &str {
        &self.status
    }
    pub fn clear_status(&mut self) {
        self.status.clear();
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: ::std::string::String) {
        self.status = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_status(&mut self) -> &mut ::std::string::String {
        &mut self.status
    }

    // Take field
    pub fn take_status(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.status, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ThingResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.status)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.status.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.status);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.status.is_empty() {
            os.write_string(1, &self.status)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ThingResponse {
        ThingResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "status",
                    |m: &ThingResponse| { &m.status },
                    |m: &mut ThingResponse| { &mut m.status },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ThingResponse>(
                    "ThingResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ThingResponse {
        static mut instance: ::protobuf::lazy::Lazy<ThingResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ThingResponse,
        };
        unsafe {
            instance.get(ThingResponse::new)
        }
    }
}

impl ::protobuf::Clear for ThingResponse {
    fn clear(&mut self) {
        self.status.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ThingResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ThingResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Thing {
    // message fields
    pub name: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Thing {
    fn default() -> &'a Thing {
        <Thing as ::protobuf::Message>::default_instance()
    }
}

impl Thing {
    pub fn new() -> Thing {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Thing {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Thing {
        Thing::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    |m: &Thing| { &m.name },
                    |m: &mut Thing| { &mut m.name },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Thing>(
                    "Thing",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Thing {
        static mut instance: ::protobuf::lazy::Lazy<Thing> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Thing,
        };
        unsafe {
            instance.get(Thing::new)
        }
    }
}

impl ::protobuf::Clear for Thing {
    fn clear(&mut self) {
        self.name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Thing {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Thing {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Extra {
    // message fields
    pub name: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Extra {
    fn default() -> &'a Extra {
        <Extra as ::protobuf::Message>::default_instance()
    }
}

impl Extra {
    pub fn new() -> Extra {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Extra {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Extra {
        Extra::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    |m: &Extra| { &m.name },
                    |m: &mut Extra| { &mut m.name },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Extra>(
                    "Extra",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Extra {
        static mut instance: ::protobuf::lazy::Lazy<Extra> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Extra,
        };
        unsafe {
            instance.get(Extra::new)
        }
    }
}

impl ::protobuf::Clear for Extra {
    fn clear(&mut self) {
        self.name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Extra {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Extra {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x16basicpersonality.proto\x12\x10basicpersonality\"l\n\x0cThingReques\
    t\x12-\n\x05thing\x18\x01\x20\x01(\x0b2\x17.basicpersonality.ThingR\x05t\
    hing\x12-\n\x05extra\x18\x02\x20\x01(\x0b2\x17.basicpersonality.ExtraR\
    \x05extra\"'\n\rThingResponse\x12\x16\n\x06status\x18\x01\x20\x01(\tR\
    \x06status\"\x1b\n\x05Thing\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04nam\
    e\"\x1b\n\x05Extra\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name2\x80\
    \x02\n\x10BasicPersonality\x12M\n\x08PutThing\x12\x1e.basicpersonality.T\
    hingRequest\x1a\x1f.basicpersonality.ThingResponse\"\0\x12M\n\x08GetThin\
    g\x12\x1e.basicpersonality.ThingRequest\x1a\x1f.basicpersonality.ThingRe\
    sponse\"\0\x12N\n\tWaitThing\x12\x1e.basicpersonality.ThingRequest\x1a\
    \x1f.basicpersonality.ThingResponse\"\0J\x97\x05\n\x06\x12\x04\0\0\x15\
    \x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x02\0\x19\n\
    \n\n\x02\x06\0\x12\x04\x04\0\x08\x01\n\n\n\x03\x06\0\x01\x12\x03\x04\x08\
    \x18\n\x0b\n\x04\x06\0\x02\0\x12\x03\x05\x027\n\x0c\n\x05\x06\0\x02\0\
    \x01\x12\x03\x05\x06\x0e\n\x0c\n\x05\x06\0\x02\0\x02\x12\x03\x05\x0f\x1b\
    \n\x0c\n\x05\x06\0\x02\0\x03\x12\x03\x05&3\n\x0b\n\x04\x06\0\x02\x01\x12\
    \x03\x06\x027\n\x0c\n\x05\x06\0\x02\x01\x01\x12\x03\x06\x06\x0e\n\x0c\n\
    \x05\x06\0\x02\x01\x02\x12\x03\x06\x0f\x1b\n\x0c\n\x05\x06\0\x02\x01\x03\
    \x12\x03\x06&3\n\x0b\n\x04\x06\0\x02\x02\x12\x03\x07\x028\n\x0c\n\x05\
    \x06\0\x02\x02\x01\x12\x03\x07\x06\x0f\n\x0c\n\x05\x06\0\x02\x02\x02\x12\
    \x03\x07\x10\x1c\n\x0c\n\x05\x06\0\x02\x02\x03\x12\x03\x07'4\n\n\n\x02\
    \x04\0\x12\x04\t\0\x0c\x01\n\n\n\x03\x04\0\x01\x12\x03\t\x08\x14\n\x0b\n\
    \x04\x04\0\x02\0\x12\x03\n\x02\x12\n\r\n\x05\x04\0\x02\0\x04\x12\x04\n\
    \x02\t\x16\n\x0c\n\x05\x04\0\x02\0\x06\x12\x03\n\x02\x07\n\x0c\n\x05\x04\
    \0\x02\0\x01\x12\x03\n\x08\r\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\n\x10\
    \x11\n\x0b\n\x04\x04\0\x02\x01\x12\x03\x0b\x02\x12\n\r\n\x05\x04\0\x02\
    \x01\x04\x12\x04\x0b\x02\n\x12\n\x0c\n\x05\x04\0\x02\x01\x06\x12\x03\x0b\
    \x02\x07\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x0b\x08\r\n\x0c\n\x05\x04\
    \0\x02\x01\x03\x12\x03\x0b\x10\x11\n\n\n\x02\x04\x01\x12\x04\r\0\x0f\x01\
    \n\n\n\x03\x04\x01\x01\x12\x03\r\x08\x15\n\x0b\n\x04\x04\x01\x02\0\x12\
    \x03\x0e\x02\x14\n\r\n\x05\x04\x01\x02\0\x04\x12\x04\x0e\x02\r\x17\n\x0c\
    \n\x05\x04\x01\x02\0\x05\x12\x03\x0e\x02\x08\n\x0c\n\x05\x04\x01\x02\0\
    \x01\x12\x03\x0e\t\x0f\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x0e\x12\x13\
    \n\n\n\x02\x04\x02\x12\x04\x10\0\x12\x01\n\n\n\x03\x04\x02\x01\x12\x03\
    \x10\x08\r\n\x0b\n\x04\x04\x02\x02\0\x12\x03\x11\x02\x12\n\r\n\x05\x04\
    \x02\x02\0\x04\x12\x04\x11\x02\x10\x0f\n\x0c\n\x05\x04\x02\x02\0\x05\x12\
    \x03\x11\x02\x08\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03\x11\t\r\n\x0c\n\
    \x05\x04\x02\x02\0\x03\x12\x03\x11\x10\x11\n\n\n\x02\x04\x03\x12\x04\x13\
    \0\x15\x01\n\n\n\x03\x04\x03\x01\x12\x03\x13\x08\r\n\x0b\n\x04\x04\x03\
    \x02\0\x12\x03\x14\x02\x12\n\r\n\x05\x04\x03\x02\0\x04\x12\x04\x14\x02\
    \x13\x0f\n\x0c\n\x05\x04\x03\x02\0\x05\x12\x03\x14\x02\x08\n\x0c\n\x05\
    \x04\x03\x02\0\x01\x12\x03\x14\t\r\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03\
    \x14\x10\x11b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
